/*
 * MIT License
 *
 * Copyright (c) 2019 Micro Focus or one of its affiliates.
 *
 * Licensed under the MIT License (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://opensource.org/licenses/MIT
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and limitations under the License.
 *
 */

package com.microfocus.adm.pulse.pluginapi.chain.dto;

/**
 * <p>
 * This interface represents a metric definition within the Pulse framework and is required in order for an expert to make a metric
 * measurement. They are generated by the metric builder {@link com.microfocus.adm.pulse.pluginapi.chain.PulseMetricBuilder} provided
 * by
 * {@link com.microfocus.adm.pulse.pluginapi.chain.PulseMetricsRegistrarAware#setMetricsRegistrar(com.microfocus.adm.pulse.pluginapi.chain.PulseMetricsRegistrar)}
 * and in order to be measured need to be registered by a call to
 * {@link com.microfocus.adm.pulse.pluginapi.chain.PulseMetricsRegistrar#registerMetric(PulseMetric)}.
 * </p>
 * <p>
 * See {@link com.microfocus.adm.pulse.pluginapi.chain.PulseMetricsRegistrar} for more information about registering metrics.
 * </p>
 *
 * @since CM_14.2
 */
public interface PulseMetric {

    /**
     * <p>
     * Indicates whether this metric definition has been registered with the Pulse framework. Metrics can't be measured until
     * they've been registered.
     * </p>
     *
     * @return True if the metric has been registered.
     * @since CM_14.2
     */
    boolean isRegistered();

    /**
     * <p>
     * Gets the fully qualified id of the expert this metric is associated with.
     * </p>
     *
     * @return FQN of the expert that owns the metric.
     * @since CM_14.2
     */
    String getExpertFqn();

    /**
     * <p>
     * Gets the metric realm that the metric belongs to. See {@link PulseMetricCoreRealm}
     * for examples of some of the metric realms.
     * </p>
     *
     * @return Realm of metrics this belongs to.
     * @since CM_14.2
     */
    String getRealm();

    /**
     * <p>
     * Gets a textual description of the metric. This will be displayed in the user interface.
     * </p>
     *
     * @return Description of this metric.
     * @since CM_14.2
     */
    String getDescription();

    /**
     * <p>
     * Gets the Fully qualified id of the metric. The metric FQN includes the experts FQN.
     * </p>
     *
     * @return Fully qualified id of the metric
     * @since CM_14.2
     */
    String getFqn();

    /**
     * <p>
     * Gets the name of the metric used as a label for the metric in the user interface.
     * </p>
     *
     * @return Display name of the metric.
     * @since Micro Focus Pulse 19.1
     */
    String getDisplayName();

    /**
     * <p>
     * Gets the id of the metric.
     * </p>
     *
     * @return Id of the metric.
     * @since Micro Focus Pulse 19.1
     */
    String getMetricId();

    /**
     * <p>
     * Gets the type of the value that measurements of this metric are made in. This allows the Pulse system to know how to render
     * the value when displaying it in the user interface.
     * </p>
     *
     * @return The type of the value for a measurement of this metric.
     * @since CM_14.2
     */
    PulseMetricType getValueType();

    /**
     * <p>
     * For numeric values, this property indicates if an increasing value is better or worse than a previous value. This can be used
     * by the Pulse user interface to indicate whether a value is getting better or worse.
     * </p>
     *
     * @return Indicates if an increasing value is better or worse
     * @since CM_14.2
     */
    PulseMetricDirection getDirection();

    /**
     * <p>
     * Gets the upper bound of the scale range for this scale metric.
     * </p>
     *
     * @return Upper bound. Null if the metric isn't a scale metric.
     * @since CM_14.2
     */
    Double getUpperScaleBound();

    /**
     * <p>
     * Gets the lower bound of the scale range for this scale metric.
     * </p>
     *
     * @return Lower bound. Null if the metric isn't a scale metric.
     * @since CM_14.2
     */
    Double getLowerScaleBound();

    /**
     * <p>
     * Get the storage mechanism for the metric. See {@link PulseMetricStorage} for the types of storage supported.
     * </p>
     *
     * @return Storage mechanism.
     * @since CM_14.2
     */
    PulseMetricStorage getStorage();
}
